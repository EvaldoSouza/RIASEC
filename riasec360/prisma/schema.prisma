generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model aplicacao {
  id_aplicacao     Int       @id @default(autoincrement())
  id_respondente   Int
  id_grupo         Int?
  id_teste         Int
  local            String?   @db.VarChar(50)
  data_agendamento DateTime? @db.Timestamp(0)
  inicio_aplicacao DateTime? @db.Timestamp(0)
  fim_aplicacao    DateTime? @db.Timestamp(0)

  usuario         usuario           @relation(fields: [id_respondente], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "aplicacao_ibfk_1")
  grupo           grupo?            @relation(fields: [id_grupo], references: [id_grupo], onDelete: NoAction, onUpdate: NoAction, map: "aplicacao_ibfk_2")
  teste           teste             @relation(fields: [id_teste], references: [id_teste], onDelete: NoAction, onUpdate: NoAction, map: "aplicacao_ibfk_3")
  resposta_cartao resposta_cartao[]
}

model cartao {
  id_cartao       Int               @id @default(autoincrement())
  pergunta        String?           @db.VarChar(300)
  tipo            String?           @db.VarChar(50)
  em_uso          Boolean?          @default(false)
  teste_cartao    teste_cartao[]
  resposta_cartao resposta_cartao[]
}

model teste {
  id_teste      Int            @id @default(autoincrement())
  descricao     String?        @db.VarChar(300)
  quant_cartoes Int?
  data_criacao  DateTime?      @db.Timestamp(0)
  teste_cartao  teste_cartao[] @relation()
  aplicacao     aplicacao[]
}

model teste_cartao {
  id_teste  Int
  id_cartao Int
  teste     teste  @relation(fields: [id_teste], references: [id_teste], onDelete: Cascade, onUpdate: NoAction, map: "teste_cartao_ibfk_1")
  cartao    cartao @relation(fields: [id_cartao], references: [id_cartao], onDelete: NoAction, onUpdate: NoAction, map: "teste_cartao_ibfk_2")

  @@id([id_teste, id_cartao])
  @@index([id_cartao], map: "id_cartao")
}

model resposta_cartao {
  id_resposta   Int       @id @default(autoincrement())
  id_aplicacao  Int
  id_cartao     Int
  resposta      String?   @db.VarChar(50)
  tipo_resposta String?   @db.VarChar(50)
  aplicacao     aplicacao @relation(fields: [id_aplicacao], references: [id_aplicacao], onDelete: Cascade, onUpdate: NoAction, map: "resposta_cartao_ibfk_1")
  cartao        cartao    @relation(fields: [id_cartao], references: [id_cartao], onDelete: Cascade, onUpdate: NoAction, map: "resposta_cartao_ibfk_2")
}

model grupo {
  id_grupo      Int             @id @default(autoincrement())
  nome          String?         @unique(map: "nome") @db.VarChar(50)
  descricao     String?         @db.VarChar(300)
  data_criacao  DateTime?       @db.Timestamp(0)
  usuario_grupo usuario_grupo[]
  aplicacao     aplicacao[]
}

model usuario {
  id_user          Int             @id @default(autoincrement())
  nome             String          @db.VarChar(50)
  email            String          @unique
  emailVerified    DateTime?
  data_nasc        DateTime        @db.Date
  senha            String          @db.VarChar(200)
  data_criacao     DateTime        @db.Timestamp(0)
  data_atualizacao DateTime?       @db.Timestamp(0)
  privilegio       String
  usuario_grupo    usuario_grupo[]

  sessao    sessao[]
  aplicacao aplicacao[]
}

//Vou usar sessão para gerenciar o acesso. Porque, eu não sei, só sei que to fazendo assim
//Por cookies se pá é até melhor
//Ok, vamos estudar para ver se eu descubro qual o melhor
//Não descobri, só bora pra frente, se der merda a gente corrige
model sessao {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         usuario  @relation(fields: [userId], references: [id_user])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model usuario_grupo {
  id_usuario Int
  id_grupo   Int
  usuario    usuario @relation(fields: [id_usuario], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "usuario_grupo_ibfk_1")
  grupo      grupo   @relation(fields: [id_grupo], references: [id_grupo], onDelete: NoAction, onUpdate: NoAction, map: "usuario_grupo_ibfk_2")

  @@id([id_usuario, id_grupo])
  @@index([id_grupo], map: "id_grupo")
}

//Tabelas usadas para autenticação. Pegando do tutorial da Auth.js
//Talvez eu deva deletar meu usuário, e deixar só essas
//Removi pra não ficar criando confusão aqui. Se eu precisar de alguma coisa, acho o tutorial de novo.
